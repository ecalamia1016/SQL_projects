use salesshort;

-- Question 1

# Step 1):

SELECT sum(quantityOrdered) 
FROM orderdetails as od
GROUP BY orderNumber;

# Step 2)
SELECT avg(OrdQTY) 
FROM( 
	SELECT sum(quantityOrdered) as OrdQTY
    FROM orderdetails as od
    GROUP BY orderNumber) as orderQTY;

# Step 3)

SELECT orderNumber, sum(quantityOrdered) AS 'Order Quantity' 
FROM orderdetails as od
GROUP BY orderNumber
HAVING sum(quantityOrdered) >
	(SELECT avg(OrdQTY)
    FROM ( SELECT sum(quantityOrdered) as OrdQTY
    FROM orderdetails as od
    GROUP BY orderNumber) as orderQTY);

# Step 4)

SELECT c.customerNumber, c.customerName, o.orderNumber, sum(quantityOrdered) as 'order quantity'
FROM orderdetails as od
JOIN orders as o
	ON od.orderNumber = o.orderNumber
JOIN customers as c
	ON o.customerNumber = c.customerNumber
GROUP BY orderNumber
HAVING sum(quantityOrdered) >
	(SELECT avg(ordQTY)
    FROM ( SELECT sum(quantityOrdered) as OrdQTY
			FROM orderdetails as od
            GROUP BY orderNumber) as orderQty);

# Step 5)

SELECT c.customerNumber, c.customerName, o.orderNumber, sum(quantityOrdered) as 'order quantity',
	(SELECT avg(ordQTY) 
    FROM ( SELECT sum(quantityOrdered) as OrdQty
			FROM orderdetails as od
            GROUP BY orderNumber) as orderQty) as 'Avg Order Qty'
FROM orderdetails as od
JOIN orders as o 
	ON od.orderNumber = o.orderNumber
JOIN customers as c 
	ON o.customerNumber = c.customerNumber
GROUP BY orderNumber 
HAVING sum(quantityOrdered) >
	(SELECT avg(ordQty) 
     FROM (SELECT sum(quantityOrdered) as OrdQty
		   FROM orderdetails as od
			GROUP BY orderNumber) as orderQty)
ORDER BY customerName;

-- Question 2 -------------------------------------------------------------------------
# Step 1)

SELECT sum(quantityOrdered * priceEach)
FROM customers as c
JOIN orders as o 
	ON c.customerNumber = o.customerNumber
JOIN orderdetails as od
	ON o.orderNumber = od.orderNumber
GROUP BY c.customerNumber;

# Step 2)

SELECT max(rev)
FROM (SELECT sum(quantityOrdered * priceEach) as rev
	  FROM customers as c
      JOIN orders as o 
		ON c.customerNumber = o.customerNumber
	  JOIN orderdetails as od
		ON o.orderNumber = od.orderNumber
	  GROUP BY c.customerNumber) as custRev;

# Step 3)

SELECT c.customerNumber, c.customerName, sum(quantityOrdered * priceEach) as rev
FROM customers as c
JOIN orders as o
	ON c.customerNumber = o.customerNumber
JOIN orderdetails as od
	ON o.orderNumber = od.orderNumber
GROUP BY c.customerNumber 
HAVING sum(quantityOrdered * priceEach) =
	( Select max(rev)
	  FROM (SELECT sum(quantityOrdered * priceEach) as rev 
			FROM customers as c
            JOIN orders as o
				ON c.customerNumber = o.customerNumber
			JOIN orderdetails as od
				ON o.orderNumber = od.orderNumber
			GROUP BY c.customerNumber) as custRev);

-- Question 3 --------------------------------------------------------------

# Step 1)

SELECT sum(quantityOrdered * priceEach)
FROM customers as c
JOIN orders as o
	ON c.customerNumber = o.customerNumber
JOIN orderdetails as od
	ON o.orderNumber = od.orderNumber
GROUP BY c.customerNumber;

# Step 2)

SELECT DISTINCT( sum(quantityOrdered * priceEach))
FROM customers as c
JOIN orders as o
	ON c.customerNumber = o.customerNumber
JOIN orderdetails as od
	ON o.orderNumber = od.orderNumber
GROUP BY c.customerNumber
ORDER BY sum(quantityOrdered * priceEach) DESC
LIMIT 3;

# Step 3)

SELECT min(rev3)
FROM (SELECT DISTINCT(sum(quantityOrdered * priceEach)) as rev3
	  FROM customers as c
      JOIN orders as o
		ON c.customerNumber = o.customerNumber
	  JOIN orderdetails as od
		ON o.orderNumber = od.orderNumber
	  GROUP BY c.customerNumber
      ORDER BY sum(quantityOrdered * priceEach) DESC
      LIMIT 3) as minRev3;
      
# Step 4)

SELECT c.customerNumber, customerName, sum(quantityOrdered * priceEach) as 'revenue' 
FROM customers as c
JOIN orders as o
	ON c.customerNumber = o.customerNumber
JOIN orderdetails as od
	ON o.orderNumber = od.orderNumber
GROUP BY c.customerNumber
HAVING sum(quantityOrdered * priceEach) >=
	(SELECT min(rev3) 
     FROM (SELECT DISTINCT(sum(quantityOrdered * priceEach)) as rev3
	  FROM customers as c
      JOIN orders as o
		ON c.customerNumber = o.customerNumber
	  JOIN orderdetails as od
		ON o.orderNumber = od.orderNumber
	  GROUP BY c.customerNumber
      ORDER BY sum(quantityOrdered * priceEach) DESC
      LIMIT 3) as minRev3)
ORDER BY sum(quantityOrdered * priceEach) DESC;

-- Question 4 ---------------------------------------------------------------------------------

-- Get the total revenue of each customer
-- Get the average of the entire total revenue column
-- Show customerNumber, customerName, revenue, average revenue > 30%
-- Order by revenue DESC

# Step 1)

SELECT c.customerName, sum(quantityOrdered * priceEach) as totRev
FROM customers as c
JOIN orders as o
	ON c.customerNumber = o.customerNumber
JOIN orderdetails as od
	ON o.orderNumber = od.orderNumber
GROUP BY c.customerName;

# Step 2)

SELECT avg(totREV) * 1.3 as avgRev
FROM (SELECT c.customerName, sum(quantityOrdered * priceEach) as totRev
	  FROM customers as c
	  JOIN orders as o
		  ON c.customerNumber = o.customerNumber
	  JOIN orderdetails as od
		  ON o.orderNumber = od.orderNumber
	  GROUP BY c.customerName) totRev;

# Final Step

SELECT c.customerNumber, c.customerName, sum(quantityOrdered * priceEach) as revenue, avgRev
FROM customers as c
JOIN orders as o
	ON c.customerNumber = o.customerNumber
JOIN orderdetails as od
	ON o.orderNumber = od.orderNumber
JOIN (SELECT avg(totREV) * 1.3 as avgRev
	FROM (SELECT c.customerName, sum(quantityOrdered * priceEach) as totRev
	  FROM customers as c
	  JOIN orders as o
		  ON c.customerNumber = o.customerNumber
	  JOIN orderdetails as od
		  ON o.orderNumber = od.orderNumber
	  GROUP BY c.customerName) totRev) as avgRev
GROUP BY c.customerName
HAVING revenue > (SELECT avg(totREV) * 1.3 as avgRev
		FROM (SELECT c.customerName, sum(quantityOrdered * priceEach) as totRev
			FROM customers as c
			JOIN orders as o
				ON c.customerNumber = o.customerNumber
			JOIN orderdetails as od
				ON o.orderNumber = od.orderNumber
			GROUP BY c.customerName) totRev)
ORDER BY revenue DESC;

-- Question 5 ------------------------------------------------------------------------

-- Show the Revenue per Product Line, average quantity in stock per product Line
-- Revenue per product and quantity in stock per product
-- Show product revenue as a percentage of product line revenue
-- Order by product line and within product Line by %

# Step 1)

SELECT pl.productLine, sum(quantityOrdered * priceEach) as revenue, avg(quantityInStock) as plAvgQty
FROM orderdetails as od
JOIN products as p
	ON od.productCode = p.productCode
JOIN productlines as pl
	ON p.productLine = pl.productLine
GROUP BY productLine;

# Step 2)

SELECT pl.productLine, p.productCode, sum(quantityOrdered * priceEach) as revenue, quantityInStock
FROM orderdetails as od
JOIN products as p
	ON od.productCode = p.productCode
JOIN productlines as pl
	ON p.productLine = pl.productLine
GROUP BY pl.productLine;

# Step 3)

SELECT pl2.productLine, pl2.revenue as 'Productline Revenue', plAvgQty as 'Productline Avg. Qty in Stock',
		p2.productCode, p2.revenue as 'Product Revenue', quantityInStock as 'Product Qty in Stock',
        round(p2.revenue/pl2.revenue * 100,2) as '% Product Revenue of Productline Revenue'
FROM (SELECT pl.productLine, sum(quantityOrdered * priceEach) as revenue, avg(quantityInStock) as plAvgQty
		FROM orderdetails as od
        JOIN products as p
			ON od.productCode = p.productCode
		JOIN productlines as pl
			ON p.productLine = pl.productLine
		GROUP BY pl.productLine) pl2
JOIN (SELECT pl.productLine, p.productCode, sum(quantityOrdered * priceEach) as revenue, quantityInStock
		FROM orderdetails as od
        JOIN products as p
			ON od.productCode = p.productCode
		JOIN productlines as pl
			ON p.productLine = pl.productLine
		GROUP BY p.productCode) p2
	ON pl2.productLine = p2.productLine
ORDER BY pl2.productLine, p2.revenue/pl2.revenue * 100 DESC
